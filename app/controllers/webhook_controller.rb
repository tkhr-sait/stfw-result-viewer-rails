=begin
stfw Graphical Result Viewer

stfw Graphical Result Viewer APIs.

OpenAPI spec version: 0.0.1
Contact: tkhr.sait@gmail.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end
require 'json'
require 'gviz'
require 'base64'

class WebhookController < ApplicationController
  include Swagger::Blocks

  swagger_path '/hooks' do
    operation :get do
      key :summary, "/hooks GET"
      key :descroption, "Returns all Hooks"
      key :operationId, "getHooksUsingGet_1"
      response 200 do
        key :description, "Successful Operation"
      end
      response 404 do
        key :description, "Not Found"
      end
    end
  end

  def add_hooks_with_id_using_post1
    postdatum = Postdatum.new({hookId: params['hookId'], run_id: params['payload']['run']['run_id'], payload: params.to_json})
    postdatum.save

    render json: {"message" => "yes, it worked"}
  end

  def get_hooks_using_get1
    array = []
    Postdatum.select("distinct hookId, run_id")
             .order(created_at: :desc).each { |data|
       array << { hookId: data.hookId, run_id: data.run_id }
    }
    render json: {"message" => "ok", "data" => array}
  end

  def get_hooks_with_id_using_get1
    gv = Gviz.new
    gv.global layout: "dot"

    @jsons = []
    # 最新の run_id を対象にする
    rec = Postdatum.order(created_at: :desc).find_by(hookId: params['hookId'])
    Postdatum.where("hookId = ? and run_id = ?", params['hookId'], rec.run_id)
             .order(created_at: :asc).each { |data|
      json_data = JSON.parse(data.payload)
      @jsons << json_data

      id=json_data['payload']['id']
      parent_id=json_data['payload']['parent_id']
p id,parent_id
      run_id=json_data['payload']['run']['run_id']
      desc=sprintf("%s(%s)\n%s[%s]\nstart:%s\nend  :%s",
                    json_data['payload']['type'],
                    id,
                    json_data['payload']['status'],
                    json_data['payload']['processing_time'],
                    json_data['payload']['start_time'],
                    json_data['payload']['end_time'])

      # https://www.graphviz.org/doc/info/colors.html
      color='white'
      if json_data['payload']['status'] == 'Success' then
        color='palegreen'
      elsif json_data['payload']['status'] == 'Error' then
        color='lightcoral'
      end

      if parent_id != run_id then
        gv.add parent_id.gsub(/[_+]/,"x").to_sym => id.gsub(/[_+]/,"x").to_sym
      end
      gv.node id.gsub(/[_+]/,"x").to_sym, label: desc, shape: 'box', style: 'filled,rounded', fillcolor: color
      # plugin
      if json_data['payload']['type'] == 'process' then
        json_data['payload']['run']['scenario']['bizdate']['process']['plugin']['targets'].each { | target |
          childdesc=sprintf("%s(%s)\n%s[%s]\nstart:%s\nend  :%s",
                            json_data['payload']['run']['scenario']['bizdate']['process']['plugin']['type'],
                            target.keys[0],
                            target[target.keys[0]]['result'],
                            target[target.keys[0]]['processing_time'],
                            target[target.keys[0]]['start_time'],
                            target[target.keys[0]]['end_time'])
          childcolor='white'
          if target[target.keys[0]]['result'] == 'Success' then
            childcolor='palegreen'
          elsif target[target.keys[0]]['result'] == 'Error' then
            childcolor='lightcoral'
          end
          childkey=sprintf("%s+%s",id,target.keys[0])
          gv.add id.gsub(/[_+]/,"x").to_sym => childkey.gsub(/[_+]/,"x").to_sym
          gv.node childkey.gsub(/[_+]/,"x").to_sym, label: childdesc, shape: 'box', style: 'filled,rounded', fillcolor: childcolor
        }
      end
    }
    gv.save "sample", :png
    io = File.open("sample.dot")
    data = io.read
    io = File.open("sample.png")
    @image = Base64.strict_encode64(io.read)
    render 'layouts/webhook'
    #image = Base64.strict_encode64(io.read)
    # render json: {"message" => "ok","data" => data,"image" => image}
  end
end
